{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/series/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Column.ts","webpack:///../../../../../src/.internal/charts/types/XYChart.ts"],"names":["__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","__webpack_require__","CategoryAxisDataItem","_super","_this","call","this","className","text","locations","category","startCategory","endCategory","applyTheme","__extends","Object","defineProperty","prototype","properties","value","setProperty","__WEBPACK_IMPORTED_MODULE_0__Axis__","CategoryAxis","dataItemsByCategory","__WEBPACK_IMPORTED_MODULE_2__core_utils_Dictionary__","axisFieldName","adapter","add","replace","_lastDataItem","createDataItem","component","_disposers","push","createAxisBreak","__WEBPACK_IMPORTED_MODULE_3__CategoryAxisBreak__","validateDataRange","dataCount","dataItems","length","startIndex","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","Math","floor","start","endIndex","ceil","end","renderer","invalid","validate","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","_series","iterator","series","xAxis","yAxis","invalidateDataRange","axisBreaks","maxZoomFactor","resetIterators","itemIndex","i","dataItem","getIndex","round","isInBreak","appendDataItem","validateDataElement","__disabled","axisBreak","adjustedStartValue","adjustedEndValue","breakSize","itemIndex_1","b","index","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","position","indexToPosition","endPosition","isRange","axisFill","location","point","positionToPoint","tick","updateTickElement","grid","updateGridElement","label","updateLabelElement","fill","updateFillElement","fillRule","mask","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","difference","adjustDifference","cellStartLocation","cellEndLocation","breakStartIndex","breakEndIndex","max","min","categoryToPosition","categoryToPoint","angle","positionToAngle","x","y","anyToPoint","anyToPosition","zoomToCategories","zoomToIndexes","getAnyRangePath","startLocation","endLocation","startPos","endPos","getPositionRangePath","roundPosition","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","apply","breakStartPosition","startPosition","breakEndPosition","breakPosition","getPositionLabel","initRenderer","baseGrid","disabled","__WEBPACK_IMPORTED_MODULE_1__core_Registry__","registeredClasses","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","AxisLabelCircular","padding","radius","getPropertyValue","setPropertyValue","fixPoint","axisRadius","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","atan2","sign","inside","relativeRotation","dy","measuredHeight","dx","measuredWidth","labelRadius","rotation","pixelWidth","bbox","width","pixelHeight","height","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","__WEBPACK_IMPORTED_MODULE_0__AxisLabel__","__WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__","XYSeriesDataItem","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","fields","working","stackValue","__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Array__","field","getWorkingValue","getValue","getMax","__WEBPACK_IMPORTED_MODULE_0__Series__","XYSeries","_xAxis","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","_yAxis","isMeasured","mainContainer","__WEBPACK_IMPORTED_MODULE_1__core_Sprite__","element","paper","stacked","tooltip","pointerOrientation","events","on","returnBulletDefaultState","applyInternalDefaults","readerTitle","language","translate","validateData","defineFields","dataFields","_xField","_yField","Error","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","e","_chart","raiseCriticalError","xAxisFieldName","xField","xOpenField","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","__WEBPACK_IMPORTED_MODULE_5__axes_CategoryAxis__","_xValueFields","_yValueFields","addValueField","axis","__WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","axisRanges","range","fillPath","attr","d","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","chart","xAxes","oldAxis","dataItemsByAxis","removeKey","dispose","removeValue","set","registerSeries","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","invalidateData","yAxes","_baseAxis","__WEBPACK_IMPORTED_MODULE_6__axes_DateAxis__","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","processSeriesDataItems","xAxisId","yAxisId","_tmin","_tmax","dispatchImmediately","_smin","_smax","appeared","showTooltipAtPosition","xPosition","yPosition","visible","isHiding","toAxisPosition","updateLegendValue","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_prevTooltipDataItem","type","target","_a","__values","bullets","_b","next","done","setState","showTooltip","hideTooltip","positionBullet","bullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","locationX","locationY","moveTo","bulletLocation","workingLocations","getBulletLocationY","show","duration","animation","a","interpolationDuration","delay","sequencedInterpolation","sequencedInterpolationDelay","hide","minZoomed","maxZoomed","isDisposed","once","handleDataItemWorkingValueChange","event","axisSeries","invalidateProcessedData","field_1","backwards","prevSeries","stackedSeries","prevDataItem","prevValue","setCalculatedValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","processConfig","config","map","hasKey","len","xKey","yKey","stackKeyX","stackKeyY","__WEBPACK_IMPORTED_MODULE_7__core_Registry__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","DateAxisDataItem","endDate","dates","getTime","endValue","__WEBPACK_IMPORTED_MODULE_0__ValueAxis__","DateAxis","gridIntervals","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","dateFormats","periodChangeDateFormats","_markUnitChange","_boldUnitChange","_baseIntervalReal","timeUnit","count","_startLocation","_endLocation","_prevSeriesTime","_minSeriesDifference","Number","MAX_VALUE","gridInterval","_gridInterval","gridDuration","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","pushAll","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","periodCount","baseDuration","zoom","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","__assign","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","findClosestIndex","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","dataChangeUpdate","data","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","clear","startTime","startTimeStr","this_1","undefined","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","getBreaklessDate","durationBreaksRemoved","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","moveValue","adjustedMax","endTimestamp","valueToPosition","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","sameItemTime","prevSeriesTime","time","abs","differece","_baseInterval","timeInterval","invalidate","breakTemplate","template","startLine","endLine","fillShape","_tooltipDateFormat","tooltipDateFormat","dateFormat","getCurrentLabelFormat","ticks","__WEBPACK_IMPORTED_MODULE_1__Axis__","Start","labels","zoomToDates","skipRangeEvent","instantly","parse","zoomToValues","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__","XYCursor","_lineX","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","_lineY","behavior","maxPanOut","interfaceColors","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","selection","createChild","shouldClone","fillOpacity","getFor","lineX","stroke","__WEBPACK_IMPORTED_MODULE_4__core_utils_Color__","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","pixelY","w","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","_positionPrecision","h","validatePosition","triggerMoveReal","triggeredByPointer","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","xRange","yRange","endX","endY","handleXTooltipPosition","handleCursorPositionChange","handleYTooltipPosition","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","interactionsEnabled","parent","reset","_selection","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_0__Cursor__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__","LineSeriesDataItem","__WEBPACK_IMPORTED_MODULE_0__XYSeries__","LineSeries","minDistance","segments","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__LineSeriesSegment__","_segmentsIterator","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","createNewItems","connect","tensionX","tensionY","segmentsContainer","__WEBPACK_IMPORTED_MODULE_2__core_Container__","bulletsContainer","toFront","previousDataItem","__WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","openSegment","_workingStartIndex","segment","sliceData","_workingEndIndex","openIndex","axisRange","closeIndex","points","propertiesChanged","getFirst","contents","__WEBPACK_IMPORTED_MODULE_12__core_utils_Object__","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","changed","propertyName","createLegendMarker","marker","disposeChildren","line","__WEBPACK_IMPORTED_MODULE_8__core_elements_Line__","copyFrom","x2","__WEBPACK_IMPORTED_MODULE_10__core_elements_Rectangle__","copyToLegendMarker","hasLabels_1","children","child","__WEBPACK_IMPORTED_MODULE_9__core_elements_Label__","clone","tooltipText","PieSeriesDataItem","radiusValue","uidAttr","slice","toValue","color","_legendDataItem","valueLabel","_tick","addSprite","_label","_slice","slices","hiddenInLegend","PieSeries","alignLabels","startAngle","endAngle","colors","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","calculatePercent","slicesContainer","__WEBPACK_IMPORTED_MODULE_5__core_Container__","ticksContainer","layout","labelsContainer","initSlice","__WEBPACK_IMPORTED_MODULE_1__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_3__PieTick__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","renderingFrequency","skipFocusThreshold","defaultState","transitionEasing","__WEBPACK_IMPORTED_MODULE_10__core_utils_Ease__","states","scale","itemReaderText","sliceType","observe","handleSliceScale","handleSliceMove","shiftRadius","togglable","hiddenState","opacity","_leftItems","_rightItems","_currentStartAngle","_arcRect","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","_maxRadiusPercent","radiusValuePercent","percent","reverse","arrangeLabels","slice_1","innerRadius","arc","normalizedMiddleAngle","middleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","itemsFocusable","role","focusable","ev","populateString","hoverable","nextLabel","getNextLabel","bottom","nextDataItem","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","bind","source","getContainerBBox","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","AxisRendererCircular","pixelRadiusReal","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","pixelPerfect","tooltipLocation","setAxis","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","pixelRadius","cos","sin","PI","coordinate","positionToCoordinate","inversed","updateAxisLine","__WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__","gridInnerRadius","zIndex","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","path","pixelInnerRadius","createGrid","__WEBPACK_IMPORTED_MODULE_2__GridCircular__","createFill","__WEBPACK_IMPORTED_MODULE_1__AxisFillCircular__","createLabel","__WEBPACK_IMPORTED_MODULE_3__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_0__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__","draw","__WEBPACK_IMPORTED_MODULE_0__AxisFill__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","GridCircular","__WEBPACK_IMPORTED_MODULE_0__Grid__","RadarChartDataItem","__WEBPACK_IMPORTED_MODULE_0__XYChart__","RadarChart","_axisRendererX","__WEBPACK_IMPORTED_MODULE_7__axes_AxisRendererCircular__","_axisRendererY","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererRadial__","innerRadiusModifyer","radarContainer","plotContainer","__WEBPACK_IMPORTED_MODULE_3__core_Container__","align","valign","seriesContainer","_cursorContainer","_bulletMask","__WEBPACK_IMPORTED_MODULE_4__core_elements_Circle__","processAxis","gridContainer","breakContainer","toBack","handleXAxisRangeChange","__WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__","handleYAxisRangeChange","createCursor","__WEBPACK_IMPORTED_MODULE_6__cursors_RadarCursor__","cursor","beforeDraw","rect","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","innerRect","wr","hr","mr","maxRadius","diameter","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","_pixelInnerRadius","definedBBox","createSeries","__WEBPACK_IMPORTED_MODULE_2__series_RadarSeries__","updateXAxis","updateYAxis","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_0__AxisBreak__","DateAxisBreak","startValue","__WEBPACK_IMPORTED_MODULE_0__ValueAxisBreak__","Cursor","__WEBPACK_IMPORTED_MODULE_3__core_utils_Percent__","trackable","clickable","interaction","__WEBPACK_IMPORTED_MODULE_1__core_interaction_Interaction__","body","handleCursorDown","handleCursorUp","handleCursorMove","local","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","pointer","triggerMove","getPositions","triggerDown","setGlobalStyle","__WEBPACK_IMPORTED_MODULE_4__core_interaction_Mouse__","grabbing","triggerUp","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","getHitOption","interactions","default","cancelable","preventDefault","lockElement","__WEBPACK_IMPORTED_MODULE_0__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","RadarSeriesDataItem","__WEBPACK_IMPORTED_MODULE_0__LineSeries__","RadarSeries","connectEnds","unshift","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__","LineSeriesSegment","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","__WEBPACK_IMPORTED_MODULE_4__core_utils_Object__","fillElement","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_0__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","gridType","axisAngle","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","title","opposite","__WEBPACK_IMPORTED_MODULE_1__CategoryAxis__","gridLocation","count_1","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","__WEBPACK_IMPORTED_MODULE_2__core_elements_WavedCircle__","updateTooltip","tooltipOrientation","bigNum","axisFullLength","__WEBPACK_IMPORTED_MODULE_0__AxisRendererY__","ClockHand","_axis","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","pin","__WEBPACK_IMPORTED_MODULE_1__core_elements_Circle__","startWidth","endWidth","hand","__WEBPACK_IMPORTED_MODULE_2__core_elements_Trapezoid__","leftSide","rightSide","x0","x1","_pin","removeDispose","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","property","to","updateValue","PieChartDataItem","__WEBPACK_IMPORTED_MODULE_0__SerialChart__","PieChart","chartContainer","minHeight","minWidth","updateRadius","feedLegend","chartCont","seriesRadius","__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__","legend","legendData_1","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","itemContainers","propertyFields","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries__","setLegend","pieSeriesDataItem","isHover","PieTick","__WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__","y0","y1","y2","__WEBPACK_IMPORTED_MODULE_0__elements_Tick__","PieSeries3DDataItem","depthValue","__WEBPACK_IMPORTED_MODULE_0__series_PieSeries__","PieSeries3D","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Slice3D__","depth","depthPercent","__WEBPACK_IMPORTED_MODULE_7__elements_Bullet__","ChordNode","__WEBPACK_IMPORTED_MODULE_1__axes_AxisLabelCircular__","updateRotation","background","__WEBPACK_IMPORTED_MODULE_3__core_elements_Slice__","invalidateLinks","sum_1","_outgoingSorted","_incomingSorted","arc_1","each","childAngle","childRadius","labelAngle","nextAngle","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","fromNode","mAngle","trueStartAngle","tx","ty","__WEBPACK_IMPORTED_MODULE_0__FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","ChordLink","middleLine","__WEBPACK_IMPORTED_MODULE_2__core_elements_QuadraticCurve__","isTemplate","fromX","fromY","toX","toY","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","cp","maskBullets","bulletsMask","positionBullets","mAngle1","mAngle2","cpx","cpy","__WEBPACK_IMPORTED_MODULE_0__FlowDiagramLink__","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__","TreeMapSeries","columns","configField","__WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__","seriesDataItem","showReal","hideReal","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__","AxisRendererY3D","getWidth","__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererY__","ColumnSeries3DDataItem","__WEBPACK_IMPORTED_MODULE_0__series_ColumnSeries__","ColumnSeries3D","columnsContainer","_columnsContainer","createColumnTemplate","__WEBPACK_IMPORTED_MODULE_1__elements_Column3D__","column3D","Column3D","createAssets","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Rectangle3D__","column","__WEBPACK_IMPORTED_MODULE_0__Column__","Candlestick","lowLine","__WEBPACK_IMPORTED_MODULE_1__core_elements_Line__","highLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","ConeColumn","coneColumn","__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Cone__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_72__internal_charts_cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","GaugeChartDataItem","__WEBPACK_IMPORTED_MODULE_0__RadarChart__","GaugeChart","hands","__WEBPACK_IMPORTED_MODULE_1__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__elements_ClockHand__","processHand","newValue","PieChart3DDataItem","__WEBPACK_IMPORTED_MODULE_0__PieChart__","PieChart3D","invalidateDataUsers","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries3D__","ChordDiagramDataItem","__WEBPACK_IMPORTED_MODULE_0__FlowDiagram__","ChordDiagram","nodePadding","chordContainer","nodesContainer","getNodeValue","node","sum","incomingDataItems","outgoingDataItems","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","total","_sorted","strNode","invalidateLayout","appear","links","createNode","__WEBPACK_IMPORTED_MODULE_4__elements_ChordNode__","createLink","__WEBPACK_IMPORTED_MODULE_5__elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_4__utils_Type__","QuadraticCurve","__WEBPACK_IMPORTED_MODULE_1__utils_Color__","p1","p2","__WEBPACK_IMPORTED_MODULE_2__rendering_Path__","point1","__WEBPACK_IMPORTED_MODULE_3__utils_Math__","point2","__WEBPACK_IMPORTED_MODULE_0__Line__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Array__","TreeMapDataItem","rows","hasChildren","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","level","TreeMap","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","homeText","__WEBPACK_IMPORTED_MODULE_5__core_utils_ColorSet__","sorting","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","strictMinMax","xRenderer","axisFills","yRenderer","__WEBPACK_IMPORTED_MODULE_4__series_TreeMapSeries__","seriesTemplates","zoomOutButton","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","toggleBullets","sort","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","seriesAppeared","dataUsers","cursorOverStyle","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Mouse__","zoomToSeriesDataItem","rangeChangeAnimation","binaryTree","dice","sliceDice","handleDataItemValueChange","invalidateDataItems","validateRawData","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_2__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_1__core_Container__","fixLayout","marginTop","paddingRight","scrollbarX","scrollbarY","fixColumns","__WEBPACK_IMPORTED_MODULE_4__series_ColumnSeries3D__","clustered","depthIndex","s","i_1","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateDataElementReal","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","removeChildren","cw","ch","__WEBPACK_IMPORTED_MODULE_2__elements_Candlestick__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Object__","StepLineSeriesDataItem","StepLineSeries","prevPoint","point0","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_2__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","offset","temp","setColumnStates","sprites","disableUnusedColumns","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_1__elements_ConeColumn__","orientation","CircleBullet","circle","__WEBPACK_IMPORTED_MODULE_0__Bullet__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","XYChartScrollbar","scrollbarChart","__WEBPACK_IMPORTED_MODULE_4__types_XYChart__","margin","_scrollbarChart","unselectedOverlay","_unselectedOverlay","thumbBackground","thumb","hoverState","downState","handleSeriesAdded","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","rangeChangeDuration","id","transitionDuration","zoomOutAxes","__WEBPACK_IMPORTED_MODULE_7__core_rendering_filters_DesaturateFilter__","updateByOrientation","oldValue","off","handleDataChanged","dataProvider","updateThumb","__WEBPACK_IMPORTED_MODULE_0__core_elements_Scrollbar__","NavigationBarDataItem","__WEBPACK_IMPORTED_MODULE_1__core_DataItem__","NavigationBar","textLink","__WEBPACK_IMPORTED_MODULE_3__core_elements_TextLink__","paddingTop","paddingBottom","_linksIterator","triangle","__WEBPACK_IMPORTED_MODULE_4__core_elements_Triangle__","direction","marginLeft","marginRight","separators","activeLink","fontWeight","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","validateDataElements","getLast","separator","__WEBPACK_IMPORTED_MODULE_0__core_Component__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__","ColumnSeriesDataItem","_column","setColumn","__WEBPACK_IMPORTED_MODULE_14__core_utils_Array__","_rangesColumns","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","ColumnSeries","simplifiedProcessing","__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__","tooltipColorSource","baseAxisSeries","clusterCount","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","l","r","t","percentHeight","maxWidth","maxHeight","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Math__","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","paddingLeft","itemWidth","itemHeight","sprite","change","droppedFromOpen","_dropFromOpenState","_riseFromOpenState","droppedFromPrevious","isInTransition","_columns","__WEBPACK_IMPORTED_MODULE_8__elements_Column__","_dropFromPreviousState","_riseFromPreviousState","legendDataItem","fromOpenState_1","fromPreviousState_1","__WEBPACK_IMPORTED_MODULE_9__core_elements_RoundedRectangle__","Column","applyOnClones","__WEBPACK_IMPORTED_MODULE_1__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__","XYChartDataItem","XYChart","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY__","topAxesCont","__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__","topAxesContainer","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","updateXAxesMargins","leftAxesContainer","plotCont","rightAxesCont","rightAxesContainer","__WEBPACK_IMPORTED_MODULE_8__core_elements_ZoomOutButton__","MAX_SAFE_INTEGER","updatePlotElements","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","_parseDataFrom","leftAxesWidth","rightAxesWidth","handleXAxisChange","handleYAxisChange","processXAxis","axisLetter","processXAxisRemoval","processYAxis","processYAxisRemoval","getCommonAxisRange","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","_dataUsers","_xAxes","_yAxes","processSeries","_cursor","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","__WEBPACK_IMPORTED_MODULE_7__cursors_XYCursor__","showAxisTooltip","showSeriesTooltip","hideObjectTooltip","updateSeriesLegend","topLeft","bottomRight","seriesPoints","tooltipHTML","setBounds","top_1","topSeriesPoints","botSeriesPoints","nextY","pointY","pixelMarginBottom","nextHeight","pixelMarginTop","getUpdatedRange","priority","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","panStartRange","newStart","newEnd","newRange","_scrollbarX","handleXScrollbarChange","arg","_scrollbarY","handleYScrollbarChange","fixRange","realRange","dataInvalid","diff","dataSourceDateFields","populateDataSourceFields","dataSourceNumberFields","configOrder","__WEBPACK_IMPORTED_MODULE_6__series_XYSeries__","_zoomOutButton","button","__WEBPACK_IMPORTED_MODULE_10__core_Registry__"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.startCategory = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * An alias to `category`.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} Category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\t// Add adapter to strip down `#id=xxx` from categories\r\n\t\tthis.adapter.add(\"label\", (value) => {\r\n\t\t\tvalue = value.replace(/\\#id=.*$/, \"\");\r\n\t\t\treturn value;\r\n\t\t});\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.ceil((endIndex - startIndex) / maxCount);\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i: number = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i <= this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tdataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label) {\r\n\t\t\tdataItem.text = dataItem.text; //@todo if this is left, kills custom data item text. this.adapter.apply(\"label\", dataItem.category);\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet cellStartLocation = this.renderer.cellStartLocation;\r\n\t\tlet cellEndLocation = this.renderer.cellEndLocation;\r\n\r\n\t\tdifference -= cellStartLocation;\r\n\t\tdifference -= (1 - cellEndLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - cellStartLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory));\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [basePoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels.\r\n\t *\r\n\t * @param {number} value Distance (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\t// No percent here, as it would be quite complicated to calculate radius\r\n\t\t// of a chart together with axis label radius\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this.measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this.measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius: number = this.radius * sign;\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * A maske used for series.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tprotected _rectangleMask: Rectangle;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.stacked = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t})\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem);\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem);\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (!this._xAxis.get()) {\r\n\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.xAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (!this._yAxis.get()) {\r\n\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.yAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\tbullet.setState(\"hover\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tbullet.setState(\"default\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationX(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanimation = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\t\t\tif (animation && !animation.isDisposed() && interpolationDuration == 0 && animation.duration > 0) {\r\n\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\t\t//}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates series appearance when working value changes.\r\n\t */\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<SeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?:boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue:number;\r\n\t\t\t\t\t\tif(working){\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Start date.\r\n\t *\r\n\t * Used for items that span several dates, like [[DateAxisBreak]].\r\n\t *\r\n\t * @param {Date} date Start date\r\n\t */\r\n\tpublic set startDate(date: Date) {\r\n\t\tthis.date = date;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @todo string?\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * [gridIntervals description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDateFormat: string;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _markUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * Make labels for the first label in bigger time unit bold.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _boldUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _startLocation: AxisItemLocation = 0;\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _endLocation: AxisItemLocation = 1;\r\n\r\n\t/**\r\n\t * A collection of timestamps of previously processed data items. Used\r\n\t * internally to track distance between data items when processing data.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _prevSeriesTime: Dictionary<string, number> = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to alternating cells.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\t// @todo: will this be visible in docs?\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tif (this.chart.data.length <= 1) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label) {\r\n\t\t\t\t//label.invalidate();\r\n\t\t\t\t// when count == 1 this means label represents all the period between grid lines. so we center label because of that.\r\n\t\t\t\t// we don't do that through label.location because it would reset the setting\r\n\t\t\t\t/// and we do not do that to axis ranges\r\n\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\tposition = position + (endPosition - position) / 2;\r\n\t\t\t\t\tendPosition = position;\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// this is used to automatically define baseInterval\r\n\t\tlet sameItemTime: number;\r\n\t\t// actually here we should only get dates of this axis. But it's not likely that the chart will have more than one date axis with different baseInterval.\r\n\t\t// So using this approach would mean we'll have the same baseInterval for all date axes. In case user wants different timeIntervals for different date axes, he can manually set baseInterval\r\n\t\t$object.each(dataItem.dates, (key, date) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\t//let date: Date = dataItem.dates[key];\r\n\t\t\tlet prevSeriesTime: number = this._prevSeriesTime.getKey(key);\r\n\t\t\tlet time: number = date.getTime();\r\n\t\t\t// need to check time difference betweend dates of the same data item (for example open/close. they also influence minSeriesDifference)\r\n\t\t\tif ($type.isNumber(sameItemTime)) {\r\n\t\t\t\tlet difference: number = Math.abs(time - sameItemTime);\r\n\t\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsameItemTime = time;\r\n\r\n\t\t\tlet differece: number = time - prevSeriesTime;\r\n\t\t\tif (differece > 0) {\r\n\t\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._prevSeriesTime.setKey(key, time);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this._startLocation != value) {\r\n\t\t\tthis._startLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this._startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this._endLocation != value) {\r\n\t\t\tthis._endLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this._endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tif (this._tooltipDateFormat != value) {\r\n\t\t\tthis._tooltipDateFormat = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this._tooltipDateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this._markUnitChange != value) {\r\n\t\t\tthis._markUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this._markUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Make labels for the first label in bigger time unit bold.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use bold for period beginning?\r\n\t */\r\n\tpublic set boldUnitChange(value: boolean) {\r\n\t\tif (this._boldUnitChange != value) {\r\n\t\t\tthis._boldUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use bold for period beginning?\r\n\t */\r\n\tpublic get boldUnitChange(): boolean {\r\n\t\treturn this._boldUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif(dateFormat){\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif(location > 0){\r\n\t\t\t$time.add(date, timeUnit, location);\r\n\t\t}\r\n\r\n\t\tif(this.isInBreak(date.getTime())){\r\n\t\t\twhile(date.getTime() < this.max){\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif(this.isInBreak(date.getTime())){\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.grid.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.labels.template.location = AxisItemLocation.Start;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [basePoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight }) });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 }) });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.element.attr({ \"d\": $path.rectangle(w, h) });\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.element.attr({ \"d\": \"\" });\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point, triggeredByPointer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point, triggeredByPointer);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": $path.rectangle(width, this.innerHeight, -width / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": $path.rectangle(this.innerWidth, height, 0, -height / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentPropertiess } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<LineSeriesSegment>}\r\n\t */\r\n\tpublic segments: ListTemplate<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<LineSeriesSegment>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(new LineSeriesSegment());\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(0, range);\r\n\t\t});\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment?: LineSeriesSegment): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t//for (let propertyName in itemProperties) {\r\n\t\t\t//let value: any = itemProperties[propertyName];\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tif (segment) {\r\n\t\t\t\t\tif (segment.properties[<keyof ILineSeriesSegmentPropertiess>propertyName] != value) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\tline.copyFrom(<any>this);\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\tfill.copyFrom(<any>this);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"./PieTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, ILegendItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color, iRGB, color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends SeriesDataItem implements ILegendItem<DataItem, IDataItemEvents> {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tprotected _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tprotected _tick: PieTick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t *\r\n\t * @type {LegendDataItem<DataItem, IDataItemEvents>}\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem<DataItem, IDataItemEvents>;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem\r\n\t *\r\n\t * @type {LegendSettings}\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Color of the slice.\r\n\t *\r\n\t * @todo why not Color?\r\n\t * @param {string}  value  Color\r\n\t */\r\n\tpublic set color(value: string) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Color\r\n\t */\r\n\tpublic get color(): string {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param {LegendDataItem<DataItem, IDataItemEvents>}  value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem<DataItem, IDataItemEvents>) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tvalue.label.dataItem = this;\r\n\t\tvalue.valueLabel.dataItem = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {LegendDataItem<DataItem, IDataItemEvents>} Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem<DataItem, IDataItemEvents> {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Pie Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {PieTick} Tick element\r\n\t */\r\n\tpublic get tick(): PieTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tthis._tick = this.component.ticks.create();\r\n\t\t\tthis._disposers.push(this._tick);\r\n\t\t\tthis.addSprite(this._tick);\r\n\t\t\tthis._tick.slice = this.slice;\r\n\t\t\tthis._tick.label = this.label;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\tif (!this._label) {\r\n\t\t\tthis._label = this.component.labels.create();\r\n\t\t\tthis._disposers.push(this._label);\r\n\t\t\tthis.addSprite(this._label);\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * A Slice element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {Slice} Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\t\t\tthis._slice = this.component.slices.create();\r\n\t\t\tthis._disposers.push(this._slice);\r\n\t\t\tthis.addSprite(this._slice);\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param {boolean} value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\thiddenInLegend?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t * @type {number}\r\n\t */\r\n\talignLabels?: number;\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends ISeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends Series {\r\n\r\n\tpublic _chart:PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t *\r\n\t * @type {ListTemplate<PieTick>}\r\n\t */\r\n\tpublic ticks: ListTemplate<PieTick>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t *\r\n\t * @type {ListTemplate<AxisLabelCircular>}\r\n\t */\r\n\tpublic labels: ListTemplate<AxisLabelCircular>;\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\t\tthis.isMeasured = true;\r\n\t\tthis.calculatePercent = true;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.initSlice(Slice);\r\n\r\n\t\t// Create tick list\r\n\t\tlet tick = new PieTick();\r\n\t\ttick.isMeasured = false;\r\n\t\tthis.ticks = new ListTemplate<PieTick>(tick);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.ticks));\r\n\t\tthis._disposers.push(this.ticks.template);\r\n\r\n\t\t// Create labels list\r\n\t\t// @todo create a labelText/labelHTML properties just like\r\n\t\t// tooltipText/tooltipHTML\r\n\t\tlet label = new AxisLabelCircular();\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.radius = 25;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t\tlabel.renderingFrequency = 2;\r\n\t\tthis.labels = new ListTemplate<AxisLabelCircular>(label);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.labels));\r\n\t\tthis._disposers.push(this.labels.template);\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\t//let hiddenState = this.hiddenState;\r\n\t\t//hiddenState.properties.opacity = 1;\r\n\t\t//hiddenState.properties.endAngle = -90;\r\n\t\t//hiddenState.properties.startAngle = -90;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\tlet hoverState = this.slices.template.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice}                    Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice): Slice {\r\n\t\t// Create a slice template\r\n\t\tlet slice = new sliceType();\r\n\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\t// Create slice hover state\r\n\t\tslice.states.create(\"hover\");\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\r\n\t\tlet hiddenState = slice.hiddenState;\r\n\t\thiddenState.properties.visible = true;\r\n\t\thiddenState.properties.opacity = 1;\r\n\r\n\t\t// Create slices list\r\n\t\tthis.slices = new ListTemplate<Slice>(slice);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.slices));\r\n\t\tthis._disposers.push(this.slices.template);\r\n\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (Math.abs(this.startAngle - this.endAngle) < 0.01) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.radius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t//if (percent > 0) {\r\n\r\n\t\t\t\tdataItem.__disabled = false;\r\n\r\n\t\t\t\t// SLICE\r\n\t\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t\tslice.parent = this.slicesContainer;\r\n\t\t\t\tslice.radius = this.radius;\r\n\r\n\t\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tslice.innerRadius = this.innerRadius;\r\n\t\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\t\tslice.fill = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t\t}\r\n\t\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\t\tslice.stroke = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t\t// LABEL\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tlabel.parent = this.labelsContainer;\r\n\r\n\t\t\t\tlet tick = dataItem.tick;\r\n\t\t\t\ttick.parent = this.ticksContainer;\r\n\r\n\t\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\t\tlet point: IPoint;\r\n\r\n\t\t\t\tif (this.alignLabels) {\r\n\t\t\t\t\tlet x: number = tick.length + label.radius;\r\n\r\n\t\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t\t// right half\r\n\t\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 91) { // 91 makes less chances for flickering\r\n\t\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.radius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// left half\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tx -= arcRect.x * this.radius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\t\tx *= -1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet distance = this.radius + tick.length + label.radius;\r\n\t\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t\t// Apply accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\t\tslice.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\t\tslice.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply screen reader label\r\n\t\t\t\tif (slice.focusable) {\r\n\t\t\t\t\tslice.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tslice.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (slice.hoverable) {\r\n\t\t\t\t\tslice.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tslice.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t\t//}\r\n\t\t\t//else {\r\n\t\t\t//\tdataItem.__disabled = true;\r\n\t\t\t//}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"][]}  dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i: number = 0; i < dataItems.length; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label: AxisLabelCircular = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (i < dataItems.length - 1) {\r\n\t\t\t\t\tlet nextLabel: AxisLabelCircular = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet bottom: number = label.pixelY + label.measuredHeight;\r\n\r\n\t\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\t\tif (nextLabel.y < bottom) {\r\n\t\t\t\t\t\t\tnextLabel.y = bottom;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param  {number}              index      Current index\r\n\t * @param  {PieSerisDataItem[]}  dataItems  Data items\r\n\t * @return {AxisLabelCircular}              Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): AxisLabelCircular {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param {ColorSet}  value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ColorSet} Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}          marker    Container\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t// todo: make an easy possibility to bind visual properties\r\n\t\t\tchild.bind(\"fill\", slice);\r\n\t\t\tchild.bind(\"stroke\", slice);\r\n\t\t\tchild.bind(\"fillOpacity\", slice);\r\n\t\t\tchild.bind(\"strokeOpacity\", slice);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: Slice = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\tlet value = a[1];\r\n\t\t\tthis.positionBullet(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tlet slice: Slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tdataItem.label.dx = slice.dx + slice.pixelX;\r\n\t\t\tdataItem.label.dy = slice.dy + slice.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PieSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t}\r\n\r\n\tprotected getContainerBBox():IRectangle {\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.radius);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.radius);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal:number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.isMeasured = true;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis:Axis){\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal);\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet element = this.line.element;\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.chart;\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\telement.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius) });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) }) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  end angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n  public getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * [number description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {[type]}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.element.attr({ \"d\": this.fillPath });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.element.attr({ \"d\": $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius) });\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\trenderer.axis.initRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\trenderer.axis.initRenderer();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category or a start value.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.background.fillOpacity = 0.5;\r\n\t\t//this.background.fill = color(\"#dadada\");\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionEvents[\"track\"]): IPoint {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * If `triggeredByPointer == false` the cursor will stay there, regardless\r\n\t * movement of the actual pointer(s). This is useful when you want to\r\n\t * manually place cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerMove(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tthis.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = point;\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerDown(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerDownReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerUp(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerUpReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerDown(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerUp(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentPropertiess extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentPropertiess { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentPropertiess;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.element = this.paper.add(\"path\");\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.element = this.paper.add(\"path\");\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\tlet path: string = $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t//if(this.strokeOpacity > 0 || this.strokeSprite.strokeOpacity > 0){ // not good, range stroke is not drawn then\r\n\t\t\tthis.strokeSprite.element.attr({ \"d\": path });\r\n\t\t\t//}\r\n\r\n\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\tthis.fillSprite.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint, triggeredByPointer?:boolean) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle)) {\r\n\r\n\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.element.attr({ \"d\": path });\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * Axis angle.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal);\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.element.attr({ \"d\": $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) }) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.element.attr({ \"d\": path });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  end angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis.\r\n\t *\r\n\t * @todo Description (units)\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"valueschanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"propertychanged\", () => this.invalidate())\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend, ILegendItem } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends ISerialChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.invalidate();\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (radius - pixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\t\t\t// todo: set this on default state instead?\r\n\t\t\tseries.radius = pixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\tseries.innerRadius = pixelInnerRadius + seriesRadius * i;\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: ILegendItem<DataItem, IDataItemEvents>[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PieSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (pieSeriesDataItem.visible && !pieSeriesDataItem.isHiding) {\r\n\t\t\t\t\tpieSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tpieSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"./PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tx1 = x0 + label.radius * slice.ix;\r\n\t\t\t\ty1 = y0 + label.radius * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice3D>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice3D>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice3D}                  Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice3D): Slice3D {\r\n\t\tlet slice: Slice3D = <Slice3D>super.initSlice(Slice3D);\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/*\r\n\t\tset startAngle(value: number) {\r\n\t\t\t// 3d pie series can start at 90 angle increments, otherwise big slices might overlap incorrectly\r\n\t\t\tvalue = $math.normalizeAngle(value);\r\n\t\t\tvalue = $math.round(value / 90) * 90;\r\n\r\n\t\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t\t}\r\n\r\n\t\tget startAngle(): number {\r\n\t\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t\t}\r\n\t*/\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this);\r\n\r\n\t\tthis.background.fillOpacity = 0;\r\n\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = 0;\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet arc = slice.arc;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif(!$type.isNumber(locationX)){\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif(!$type.isNumber(locationY)){\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = slice.startAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = slice.startAngle + arc * label.location;\r\n\t\t\tlet startAngle = slice.startAngle + (1 - sum / this.value) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tlet x = (slice.radius + label.radius) * $math.cos(labelAngle);\r\n\t\t\tlet y = (slice.radius + label.radius) * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.moveTo(point);\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif(!$type.isNumber(percentWidth)){\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.startAngle = slice.startAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlink.radius = slice.innerRadius;\r\n\r\n\t\t\t\t\tlink.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.innerRadius;\r\n\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif(!$type.isNumber(percentWidth)){\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = slice.startAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlink.arc = dataItem.getWorkingValue(\"value\") * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlink.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\r\n\t\tlet mAngle = this.trueStartAngle + this.slice.arc / 2;\r\n\r\n\t\tlet tx = this.slice.radius * $math.cos(mAngle);\r\n\t\tlet ty = this.slice.radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tthis.slice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tthis.link.element.attr({ \"d\": path });\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.element.attr({ \"d\": path });\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask\r\n\t\t\t\t}\r\n\t\t\t\tthis.positionBullets();\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"stroke\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\treturn this.showReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\treturn this.hideReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.element.attr({\r\n\t\t\t\"d\": $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D })\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t *\r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumn3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 308\n// module chunks = 4","/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentPropertiess, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/series/PieTick\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\n\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\n\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\n\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\n\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @ignore\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * A list of Chord links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<ChordLink>}\r\n\t */\r\n\tpublic links: ListTemplate<ChordLink>;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param {FlowDiagramNode}  node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: ChordNode) {\r\n\t\tlet sum = 0;\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tsum += dataItem.getWorkingValue(\"value\");\r\n\t\t});\r\n\r\n\t\tnode.value = sum;\r\n\r\n\t\tthis.fixMin(node);\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, $math.min(chartContainer.innerWidth, chartContainer.innerHeight)) / 2;\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\ttotal += node.value;\r\n\t\t\tcount++;\r\n\t\t});\r\n\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / total;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tnode.parent = nodesContainer;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * node.value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.invalidate();\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [appear description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic appear(): void {\r\n\t\tsuper.appear();\r\n\r\n\r\n\r\n\t\t/* quite useless - in case sequencedInterpolation = false, the animation is not visible, as the proportions\r\n\t\t   are the same. if true, then it doesn't look right either.\r\n\t\tlet duration = this.interpolationDuration;\r\n\t\tlet i = 0;\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet delay = 0;\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0.001, 0);\r\n\t\t\tdataItem.setWorkingValue(\"value\", dataItem.value, duration, delay);\r\n\t\t\ti++;\r\n\t\t})*/\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */ \r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */ \r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.element.attr({ \"d\": d });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.homeText = this.language.translate(\"Home\");\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t})\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = maxX * this.pixelHeight / this.pixelWidth;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\tthis.toggleBullets(0);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0; i < children.length; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\r\n\t\tthis._tempSeries = [];\r\n\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\tseries.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.show();\r\n\r\n\t\t\t\tif (series.level > this.currentLevel + this.maxLevels - 1) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.bulletsContainer.show(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\t\t\tif (rangeChangeAnimation) {\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to 0 to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleDataItemValueChange(): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / count;\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / count * $math.cos(this.angle) * series.depthIndex;\r\n\t\t\t\tseries.dy = -this.depth / count * $math.sin(this.angle) * series.depthIndex;\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * List of \"low\" line elements.\r\n\t *\r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _lowLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * List of \"high\" line elements.\r\n\t *\r\n\t * @type {ListTemplate<Line>}\r\n\t */\r\n\tprotected _highLines: ListTemplate<Line>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <keyof this[\"_dataFields\"]>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <keyof this[\"_dataFields\"]>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <keyof this[\"_dataFields\"]>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <keyof this[\"_dataFields\"]>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, 0);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, 0);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, 1);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, 1);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem:RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column:RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\t// @todo use getPoint() instead of these\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\t\tif(arc > 0){\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returnsan SVG path that is used as mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t}\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: -dx,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tthis.circle = this.createChild(Circle);\r\n\t\tthis.circle.shouldClone = false;\r\n\t\tthis.circle.radius = 5;\r\n\t\tthis.circle.isMeasured = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.element = this.paper.add(\"path\");\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.events.on(\"validated\", this.zoomOutAxes, this);\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\r\n\t\tscrollbarChart.series.push(series);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX;\r\n\t\t\tlet y: number = thumb.pixelY;\r\n\t\t\tlet w: number = thumb.pixelWidth;\r\n\t\t\tlet h: number = thumb.pixelHeight;\r\n\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: this.pixelWidth - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: this.pixelHeight - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(this.links.template);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(this.separators.template);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: NavigationBarDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @ignore\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <ColumnSeriesDataItem>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this.columns.iterator(), (column) => {\r\n\t\t\tcolumn.__disabled = true;\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<ColumnSeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(event.target);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t}\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (w - paddingLeft - paddingRight > 0 && h - paddingTop - paddingBottom > 0) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnProperties}\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\tthis.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", () => {\r\n\t\t\tif (this.layout == \"none\") {\r\n\t\t\t\tthis.layout = \"absolute\";\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element:\r\n\t * * Triggers events\r\n\t * * Redraws the element\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tthis.column.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param {Sprite} source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds series (graphs/plots).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartCont = this.chartContainer;\r\n\t\tchartCont.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartCont.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartCont.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartCont.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.