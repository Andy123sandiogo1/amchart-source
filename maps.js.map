{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/map/MapSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapObject.ts","webpack:///../../../../../src/.internal/charts/map/Geo.ts","webpack:///../../../../../src/.internal/charts/map/MapLine.ts","webpack:///../../../../../src/.internal/charts/map/MapUtils.ts","webpack:///../../../../../src/.internal/charts/map/MapImage.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygon.ts","webpack:///../../../../../src/.internal/charts/map/MapLineSeries.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/map/MapSpline.ts","webpack:///../../../../../src/.internal/charts/map/MapArc.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts","webpack:///./maps.js","webpack:///../../src/maps.ts","webpack:///../../../../../src/.internal/charts/types/MapChart.ts","webpack:///../../../../../src/.internal/charts/map/MapLineObject.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygonSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapSplineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapImageSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapArcSeries.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Mercator.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Miller.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Eckert6.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Orthographic.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Projection.ts"],"names":["__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","__webpack_require__","MapSeriesDataItem","_super","_this","call","this","className","values","value","applyTheme","__extends","Object","defineProperty","prototype","setValue","updateExtremes","geoPoints","s","length","longitude","latitude","west","east","north","south","__WEBPACK_IMPORTED_MODULE_0__series_Series__","MapSeries","isMeasured","nonScalingStroke","dataFields","createDataItem","validateData","__WEBPACK_IMPORTED_MODULE_2__core_utils_Iterator__","dataItems","iterator","dataItem","chart","checkInclude","includes","excludes","id","indexOf","getPropertyValue","setPropertyValue","invalidateData","processIncExc","handleObjectAdded","event","mapObject","newValue","parent","series","__WEBPACK_IMPORTED_MODULE_1__core_Registry__","registeredClasses","MapObject","layout","clickable","validate","readerTitle","itemReaderText","__WEBPACK_IMPORTED_MODULE_0__core_Container__","multiline","multiline_1","__values","multiline_1_1","next","done","segment","segment_1","segment_1_1","point","normalizePoint","geoPoint","x","y","__WEBPACK_IMPORTED_MODULE_0__core_utils_Math__","wrapAngleTo180","Math","asin","sin","latitude180","abs","angle","__WEBPACK_IMPORTED_MODULE_10__Geo__","MapLine","line","__WEBPACK_IMPORTED_MODULE_4__core_elements_Polyline__","stroke","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","strokeOpacity","interfaceColors","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","getFor","shortestDistance","positionToPoint","position","multiGeoLine","images","images_1","images_1_1","events","on","property","invalidate","imagesToConnect","_a","_b","image","push","newMultiGeoLine","i","geoLine","newGeoLine","p","geoPointA","geoPointB","stepCount","max","d","intermediatePoint","projection","previousPoint","segments","projectGeoLine","_arrow","validatePosition","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","lineObjects","measureElement","_lineObjects","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_1__MapLineObject__","handleLineObjectAdded","_disposers","template","mapLineObject","mapLine","arrow","createChild","shouldClone","width","height","triangle","__WEBPACK_IMPORTED_MODULE_2__core_elements_Triangle__","fillOpacity","__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__","rotation","horizontalCenter","verticalCenter","copyFrom","source","clone","__WEBPACK_IMPORTED_MODULE_0__MapObject__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","multiPointToGeo","points","pointToGeo","multiPolygon","multiGeoArea","surface","hole","multiLine","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Type__","MapImage","moveTo","convert","__WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__","MapPolygon","polygon","__WEBPACK_IMPORTED_MODULE_1__core_elements_Polygon__","fill","tooltipPosition","multiGeoPolygon","projectGeoArea","pixelWidth","pixelHeight","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","MapLineSeriesDataItem","_mapLine","component","mapLines","create","__WEBPACK_IMPORTED_MODULE_1__MapLine__","addSprite","_line","__WEBPACK_IMPORTED_MODULE_4__MapUtils__","_multiLine","_geoLine","_multiGeoLine","updateLineExtremes","__WEBPACK_IMPORTED_MODULE_0__MapSeries__","MapLineSeries","data","clear","useGeodata","geoJSON","geodata","features","type","geometry","console","log","feature","id_1","this_1","include","exclude","coordinates","dataObject","__WEBPACK_IMPORTED_MODULE_5__core_utils_Array__","multiLineString","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","properties","moveValue","_mapLines","lineTemplate","createLine","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","SmallMap","_chart","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","align","valign","percentHeight","percentWidth","margin","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","background","moveToPosition","updateMapSize","seriesContainer","rectangle","__WEBPACK_IMPORTED_MODULE_1__core_elements_Rectangle__","strokeWidth","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","_series","handleSeriesAdded","handleSeriesRemoved","contains","newSeries","removeValue","dataUsers","interactionsEnabled","svgPoint","rectPoint","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","zoomLevel","scale","min","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","ceil","pixelX","pixelY","scaleRatio","afterDraw","maskRectangle","processConfig","config","len","map","hasKey","getKey","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","MapSpline","__WEBPACK_IMPORTED_MODULE_1__core_elements_Polyspline__","tensionX","tensionY","__WEBPACK_IMPORTED_MODULE_0__MapLine__","MapArc","__WEBPACK_IMPORTED_MODULE_1__core_elements_Polyarc__","__WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__","ZoomControl","padding","plusButton","__WEBPACK_IMPORTED_MODULE_1__core_elements_Button__","label","text","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","language","translate","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","target","spritePoint","maxPower","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Interaction__","body","ev","topParent","hasFocused","__WEBPACK_IMPORTED_MODULE_4__core_utils_Keyboard__","isKey","isFocused","zoomIn","minHeight","visible","minWidth","isDown","step","createBackground","__WEBPACK_IMPORTED_MODULE_2__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_Registry__","window","am4maps","__WEBPACK_IMPORTED_MODULE_0__es2015_maps__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_map_Geo__","__WEBPACK_IMPORTED_MODULE_14__map_Geo__","MapChartDataItem","__WEBPACK_IMPORTED_MODULE_0__SerialChart__","MapChart","zoomDuration","zoomEasing","__WEBPACK_IMPORTED_MODULE_11__core_utils_Ease__","_prevZoomGeoPoint","__WEBPACK_IMPORTED_MODULE_4__map_projections_Projection__","deltaLongitude","inert","resizable","handleMapTransform","handleDoubleHit","chartContainer","udpateScaleRatio","chartContainerBg","e","dragStart","interactions","downPointers","getIndex","dragStop","focusable","handleWheel","handleMapDown","__WEBPACK_IMPORTED_MODULE_7__core_interaction_Interaction__","_zoomControl","__WEBPACK_IMPORTED_MODULE_6__core_utils_Keyboard__","getEventKey","pan","applyInternalDefaults","__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__","_mapAnimation","stop","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","htmlContainer","shift","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","centerPoint","westPoint","eastPoint","northPoint","southPoint","seriesWidth","seriesHeight","vScale","innerWidth","hScale","innerHeight","Infinity","dispatch","seriesPoint","seriesPointToGeo","geoPointToSVG","geoPointToSeries","invert","_geodata","_dataUsers","center","duration","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","animate","to","pixelPaddingLeft","pixelPaddingTop","zoomToMapObject","__WEBPACK_IMPORTED_MODULE_2__map_MapImage__","__WEBPACK_IMPORTED_MODULE_3__map_MapPolygon__","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","__WEBPACK_IMPORTED_MODULE_5__map_SmallMap__","removeDispose","zoomControl","createSeries","__WEBPACK_IMPORTED_MODULE_1__map_MapSeries__","invalidateProjection","_dataSources","getDataSource","loadData","setDataSourceEvents","createClassInstance","configOrder","a","b","asIs","field","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","MapLineObject","adjustRotation","MapPolygonSeriesDataItem","_mapPolygon","mapPolygons","_polygon","_multiPolygon","_geoPolygon","geoPolygon","_multiGeoPolygon","updateAreaExtremes","mapPolygon","MapPolygonSeries","parsingStepDuration","clearPolygons","dispose","_parseDataFrom","_mapPolygons","polygonTemplate","__WEBPACK_IMPORTED_MODULE_1__MapPolygon__","getPolygonById","dataContext","MapSplineSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__MapSpline__","__WEBPACK_IMPORTED_MODULE_0__MapLineSeries__","MapSplineSeries","MapImageSeriesDataItem","_mapImage","mapImages","_point","__WEBPACK_IMPORTED_MODULE_5__MapUtils__","_geoPoint","mapImage","MapImageSeries","multiPoint","multiGeoPoint","__WEBPACK_IMPORTED_MODULE_4__core_utils_Array__","_mapImages","__WEBPACK_IMPORTED_MODULE_1__MapImage__","validateDataElement","MapArcSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__MapArc__","MapArcSeries","Mercator","unproject","atan","exp","PI","project","lambda","phi","tan","__WEBPACK_IMPORTED_MODULE_0__Projection__","Miller","Eckert6","j","k","sqrt","cos","delta","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","Orthographic","getClipRectangle1","deltaLatitude","getRect1","getClipRectangle2","getRect2","clipGeoArea","geoArea","clippedArea","clipRectangle1","clipRectangle2","rect1","rect2","clippedAreas","surfaceRect","getExtremes","isInside","isOutside","clippedSurface1","clip","clippedHole1","clippedSurface2","clippedHole2","clippedAreas_1","clippedAreas_1_1","area","prevPoint","i_1","extraPoints","splice","apply","__spread","__WEBPACK_IMPORTED_MODULE_2__Geo__","Projection","deltaGama","clippedGeoArea","convertGeoArea","convertGeoLine","clipGeoLine","clippedLine","clippedSegments","clipLine","concat","clippedSegments2","convertedPoints","convertedAreaPoints","convertedSurface","convertedHole","convertedSegmentPoints","rotate","pointInRadians","__WEBPACK_IMPORTED_MODULE_1__core_utils_Math__","unrotate","deltaGamma","deltaLambda","deltaPhi","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosPhi","z","atan2","subjectPolyline","clipPolygon","cp1","cp2","inside","intersection","dc","dp","n1","n2","n3","inputList","subjectPolygon","outputList","r1","r2","pointA","pointB","phi1","lambda1","phi2","lambda2","sinPhi1","cosPhi1","sinLambda1","cosLambda1","sinPhi2","cosPhi2","sinLambda2","cosLambda2","A","B","phi3","lambda3","__WEBPACK_IMPORTED_MODULE_0__core_Registry__"],"mappings":"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","file":"maps.js","sourcesContent":["/**\r\n * Map series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../series/Series\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapObject } from \"./MapObject\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeriesDataItem\";\r\n\t\tthis.values.value = {};\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the data item.\r\n\t *\r\n\t * Value may be used in heat-map calculations.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateExtremes(geoPoints: IGeoPoint[]): void {\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((this.west > longitude) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = longitude;\r\n\t\t\t}\r\n\t\t\tif ((this.east < longitude) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < latitude) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = latitude;\r\n\t\t\t}\r\n\t\t\tif ((this.south > latitude) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [GEOJSONGeometry description]\r\n *\r\n * @type {string}\r\n * @todo Description\r\n */\r\nexport type GEOJSONGeometry = \"Point\" | \"LineString\" | \"Polygon\" | \"MultiPoint\" | \"MultiLineString\" | \"MultiPolygon\";\r\n\r\n/**\r\n * Defines data fields for [[MapSeries]].\r\n *\r\n * @todo Alllow any number of values?\r\n */\r\nexport interface IMapSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * A field number in data for a numeric value of the map object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A flag telling if the series should get data from `geodata` or not\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseGeodata?: boolean;\r\n\r\n\t/**\r\n\t * A list of object ids to include from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\tinclude?: string[];\r\n\r\n\t/**\r\n\t * A list of object ids to exclude from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\texclude?: string[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSeriesAdapters extends ISeriesAdapters, IMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * The longitude of the East-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The longitude of the West-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The latitude of the South-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The latitude of the North-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeries\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tif ((this.west > dataItem.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = dataItem.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < dataItem.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = dataItem.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < dataItem.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = dataItem.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > dataItem.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = dataItem.south;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.chart.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether object should be included in series.\r\n\t *\r\n\t * @param  {string[]}  includes  A list of explicitly included ids\r\n\t * @param  {string[]}  excludes  A list of explicitly excluded ids\r\n\t * @param  {string}    id        Id of the object\r\n\t * @return {boolean}             Include?\r\n\t */\r\n\tprotected checkInclude(includes: string[], excludes: string[], id: string): boolean {\r\n\t\tif (includes) {\r\n\t\t\tif (includes.length == 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (includes.indexOf(id) == -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (excludes && excludes.length > 0) {\r\n\t\t\tif (excludes.indexOf(id) != -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Should the map extract all the data about element, such as title, from\r\n\t * GeoJSON format?\r\n\t * @todo: review description, this is more about polygons/lines/points and not about titles. if a mapPolygonSeries doesn't have this set to true, it won't show any areas unless you pass data directly to the series\r\n\t *\r\n\t * @param {boolean}  value  Use GeoJSON data?\r\n\t */\r\n\tpublic set useGeodata(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"useGeodata\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use GeoJSON data?\r\n\t */\r\n\tpublic get useGeodata(): boolean {\r\n\t\treturn this.getPropertyValue(\"useGeodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be explictly included in the series.\r\n\t *\r\n\t * If this is not set, the series will automatically include all of the\r\n\t * objects, available in the GeoJSON map. (minus the ones listed in\r\n\t * `exclude`)\r\n\t *\r\n\t * If you need to display only specific objects, use `include`. E.g.:\r\n\t *\r\n\t * `include = [\"FR\", \"ES\", \"DE\"];`\r\n\t *\r\n\t * The above will show only France, Spain, and Germany out of the whole map.\r\n\t *\r\n\t * @param {string[]}  value  Included objects\r\n\t */\r\n\tpublic set include(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"include\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\t//this.data = [];\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Included objects\r\n\t */\r\n\tpublic get include(): string[] {\r\n\t\treturn this.getPropertyValue(\"include\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be excluded from the series.\r\n\t *\r\n\t * E.g. you want to include all of the areas from a GeoJSON map, except\r\n\t * Antarctica.\r\n\t *\r\n\t * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n\t *\r\n\t * @param {string[]}  value  Excluded ids\r\n\t */\r\n\tpublic set exclude(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"exclude\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Excluded ids\r\n\t */\r\n\tpublic get exclude(): string[] {\r\n\t\treturn this.getPropertyValue(\"exclude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a newly added object.\r\n\t *\r\n\t * @param {IListEvents<MapObject>[\"inserted\"]} event [description]\r\n\t */\r\n\tprotected handleObjectAdded(event: IListEvents<MapObject>[\"inserted\"]) {\r\n\t\tlet mapObject: MapObject = event.newValue;\r\n\t\tmapObject.parent = this;\r\n\t\tmapObject.series = this;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSeries\"] = MapSeries;\r\nregistry.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSeries.ts","/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapObjectEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSeries}\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapObject.ts","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo-point\r\n * @return {IGeoPoint}            Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint[][]}  multiline  Source geo-line\r\n * @return {IGeoPoint[]}               Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: IGeoPoint[][]): IGeoPoint[][] {\r\n\tfor (let segment of multiline) {\r\n\t\tfor (let point of segment) {\r\n\t\t\tpoint = normalizePoint(point);\r\n\t\t}\r\n\t}\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param  {number}  angle  Angle\r\n * @return {number}         Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo point\r\n * @return {IPoint}               Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/Geo.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $geo from \"./Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path\r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapLineEvents;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t *\r\n\t * @type {Polyline}\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * [_lineObjects description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {ListTemplate<MapLineObject>}\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * [_arrow description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MapLineObject}\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * [_distance description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _distance: number;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t * @ignore\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\t// Create a line and set its default properties\r\n\t\tthis.line = new Polyline();\r\n\t\tthis.line.stroke = color();\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.line) {\r\n\t\t\treturn this.line.positionToPoint(position);\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [multiGeoLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IGeoPoint[][]} multiGeoLine [description]\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} [description]\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoLine\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t *\r\n\t * @param {MapImages[]} images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[]) {\r\n\t\t//@todo dispose listeners if previous imagesToConnect exists\r\n\t\tfor (let image of images) {\r\n\t\t\timage.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\t\t//let multiPoints: IPoint[][] = [];\r\n\t\tlet multiGeoLine: IGeoPoint[][] = this.multiGeoLine;\r\n\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: IGeoPoint[] = [];\r\n\t\t\tmultiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tsegment.push({ longitude: image.longitude, latitude: image.latitude });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.shortestDistance) {\r\n\t\t\tlet newMultiGeoLine: IGeoPoint[][] = [];\r\n\r\n\t\t\tfor (let i = 0; i < multiGeoLine.length; i++) {\r\n\t\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\t\tlet newGeoLine: IGeoPoint[] = [];\r\n\r\n\t\t\t\tfor (let p = 1; p < geoLine.length; p++) {\r\n\t\t\t\t\tlet geoPointA: IGeoPoint = geoLine[p - 1];\r\n\t\t\t\t\tlet geoPointB: IGeoPoint = geoLine[p];\r\n\r\n\t\t\t\t\tlet stepCount: number = Math.max(Math.abs(geoPointA.latitude - geoPointB.latitude), Math.abs(geoPointA.longitude - geoPointB.longitude));\r\n\t\t\t\t\t//let latitudeStep: number = (geoPointB.latitude - geoPointA.latitude) / stepCount;\r\n\t\t\t\t\t//let longitudeStep: number = (geoPointB.longitude - geoPointA.longitude) / stepCount;\r\n\r\n\t\t\t\t\tfor (let d = 0; d < stepCount; d++) {\r\n\t\t\t\t\t\tlet intermediatePoint = chart.projection.intermediatePoint(geoPointA, geoPointB, d / stepCount);\r\n\r\n\t\t\t\t\t\tif (newGeoLine.length > 0) {\r\n\t\t\t\t\t\t\tlet previousPoint = newGeoLine[newGeoLine.length - 1];\r\n\t\t\t\t\t\t\tif (Math.abs(previousPoint.longitude - intermediatePoint.longitude) > 359) {\r\n\t\t\t\t\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t\t\t\t\t\tnewGeoLine = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnewGeoLine.push(intermediatePoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t}\r\n\t\t\tmultiGeoLine = newMultiGeoLine;\r\n\t\t}\r\n\r\n\t\tthis.line.segments = chart.projection.projectGeoLine(multiGeoLine);\r\n\r\n\t\tif (this._arrow) {\r\n\t\t\tthis._arrow.validatePosition();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\tx.validatePosition();\r\n\t\t});\r\n\r\n\t\tthis.line.parent = this;\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects, the line consists of.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @readonly\r\n\t * @return {ListTemplate<MapLineObject>} List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._lineObjects));\r\n\t\t\tthis._disposers.push(this._lineObjects.template);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t *\r\n\t * @param {IListEvents<MapLineObject>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"inserted\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t *\r\n\t * @param {MapLineObject}  arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapLineObject} Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\ttriangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t *\r\n\t * @param {MapLineObject}  source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLine.ts","/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n * \r\n * @param  {number[][][][]}  multiPolygon  Source multi-polygon\r\n * @return {IGeoPoint[]}                   Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: number[][][][]): IGeoPoint[][][] {\r\n\tlet multiGeoArea: IGeoPoint[][][] = [];\r\n\r\n\tfor (let i: number = 0; i < multiPolygon.length; i++) {\r\n\r\n\t\tlet surface: number[][] = multiPolygon[i][0];\r\n\t\tlet hole: number[][] = multiPolygon[i][1];\r\n\r\n\t\t//let holePoints: IGeoPoint[] = [];\r\n\r\n\t\tmultiGeoArea[i] = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(hole));\r\n\t\t}\r\n\t}\r\n\treturn multiGeoArea;\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n * \r\n * @param  {number[][][]}  multiLine  Source multiline\r\n * @return {IGeoPoint[]}              Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: number[][][]): IGeoPoint[][] {\r\n\tlet multiGeoLine: IGeoPoint[][] = [];\r\n\r\n\tfor (let i = 0; i < multiLine.length; i++) {\r\n\t\tmultiGeoLine.push(multiPointToGeo(multiLine[i]));\r\n\t}\r\n\treturn multiGeoLine;\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n * \r\n * @param  {number[][]}   points  Source points\r\n * @return {IGeoPoint[]}          Geo-points\r\n */\r\nexport function multiPointToGeo(points: number[][]): IGeoPoint[] {\r\n\tlet geoPoints: IGeoPoint[] = [];\r\n\tfor (let i = 0; i < points.length; i++) {\r\n\t\tgeoPoints.push(pointToGeo(points[i]));\r\n\t}\r\n\treturn geoPoints;\r\n}\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n * \r\n * @param  {number[]}   point  Source point\r\n * @return {IGeoPoint}         Geo-point\r\n */\r\nexport function pointToGeo(point: number[]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapUtils.ts","/**\r\n *\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapImageSeries}\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param {number}  value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.getPropertyValue(\"latitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param {number}  value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.getPropertyValue(\"longitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\tthis.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImage.ts","/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================f================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n *\r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapPolygonEvents;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t *\r\n\t * @type {Polygon}\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\t\tthis.polygon.shouldClone = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\t/*this.events.on(\"focus\", (event) => {\r\n\t\t\t//this.toFront();\r\n\t\t\t//this.isFocused = true;\r\n\t\t});*/\r\n\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t *\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoPolygon\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.polygon.points = this.series.chart.projection.projectGeoArea(this.multiGeoPolygon);\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center latitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center longitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this\r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygon.ts","/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @type {MapLine}\r\n\t */\r\n\tprotected _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t *\r\n\t * @type {number[][]}\r\n\t */\r\n\tprotected _line: number[][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _multiLine: number[][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[]}\r\n\t */\r\n\tprotected _geoLine: IGeoPoint[];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _multiGeoLine: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapLine} Element\r\n\t */\r\n\tpublic get mapLine(): MapLine {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tthis._mapLine = this.component.mapLines.create(MapLine);\r\n\t\t\tthis.addSprite(this._mapLine);\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  line  Coordinates\r\n\t */\r\n\tpublic set line(line: number[][]) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo([line]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get line(): number[][] {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: number[][][]) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiLine(): number[][][] {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param {IGeoPoint[][]}  geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: IGeoPoint[]) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiGeoLine = [geoLine];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoLine(): IGeoPoint[] {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param {IGeoPoint[][]}  multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.updateLineExtremes(multiGeoLine);\r\n\t\tthis.mapLine.multiGeoLine = this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateLineExtremes(multiGeoLine: IGeoPoint[][]): void {\r\n\t\tfor (let i = 0; i < multiGeoLine.length; i++) {\r\n\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\tthis.updateExtremes(geoLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapLines.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiLineString\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLineString: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLineString) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLineString = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if data is parsed in chunks, lines list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapLines.moveValue(dataItem.mapLine);\r\n\t\t});\r\n\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return {ListTemplate} Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapLine} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineSeries.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISmallMapEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @type {List<MapSeries>}\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<MapSeries>} Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\tlet x: number = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\tlet y: number = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.x = x;\r\n\t\trectangle.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * Map spline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { MapSplineSeriesDataItem, MapSplineSeries } from \"./MapSplineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapSpline]].\r\n */\r\nexport interface IMapSplineProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSpline]].\r\n */\r\nexport interface IMapSplineEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSpline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineAdapters extends IMapLineAdapters, IMapSplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a spline on the map.\r\n *\r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\r\nexport class MapSpline extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapSplineEvents;\r\n\r\n\t/**\r\n\t * A visual element for the spline.\r\n\t *\r\n\t * @type {Polyspline}\r\n\t */\r\n\tpublic line: Polyspline;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSplineSeries}\r\n\t */\r\n\tpublic series: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSpline\";\r\n\r\n\t\t// Create a spline\r\n\t\tthis.line = new Polyspline();\r\n\t\tthis.line.tensionX = 0.8;\r\n\t\tthis.line.tensionY = 0.8;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSpline.ts","/**\r\n * Map arched line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyarc } from \"../../core/elements/Polyarc\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { MapArcSeries } from \"./MapArcSeries\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapArc]].\r\n */\r\nexport interface IMapArcProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArc]].\r\n */\r\nexport interface IMapArcEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcAdapters extends IMapLineAdapters, IMapArcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw an arched line on the map.\r\n *\r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\r\nexport class MapArc extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapArcEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t *\r\n\t * @type {Polyarc}\r\n\t */\r\n\tpublic line: Polyarc;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapArcSeries}\r\n\t */\r\n\tpublic series: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArc\";\r\n\r\n\t\t// Create a line\r\n\t\tthis.line = new Polyarc();\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapArc, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArc\"] = MapArc;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArc.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IZoomControlEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t\tthis.thumb.maxY = 0;\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this),\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart),\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\t\t\t\tthumb.height = slider.pixelHeight / (chart.maxZoomLevel - chart.minZoomLevel);\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / (chart.maxZoomLevel - chart.minZoomLevel);\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = Math.log(chart.zoomLevel) / Math.LN2;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * (step + 1) / this.stepCount;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight) - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts","import * as m from \"../es2015/maps\";\nwindow.am4maps = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./maps.js\n// module id = 534\n// module chunks = 5","/**\n * Duplicated\n */\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Maps\n */\nexport { MapChartDataItem, IMapPolygonDataObject, MapLineType, IMapLineDataObject, IMapImageDataObject, IMapDataObject, IMapChartDataFields, IMapChartProperties, IMapChartEvents, IMapChartAdapters, MapChart } from \"./.internal/charts/types/MapChart\";\nexport { MapSeriesDataItem, GEOJSONGeometry, IMapSeriesDataFields, IMapSeriesProperties, IMapSeriesEvents, IMapSeriesAdapters, MapSeries } from \"./.internal/charts/map/MapSeries\";\nexport { IMapObjectProperties, IMapObjectEvents, IMapObjectAdapters, MapObject } from \"./.internal/charts/map/MapObject\";\nexport { IMapPolygonProperties, IMapPolygonEvents, IMapPolygonAdapters, MapPolygon } from \"./.internal/charts/map/MapPolygon\";\nexport { IMapImageProperties, IMapImageEvents, IMapImageAdapters, MapImage } from \"./.internal/charts/map/MapImage\";\nexport { IMapLineProperties, IMapLineEvents, IMapLineAdapters, MapLine } from \"./.internal/charts/map/MapLine\";\nexport { IMapSplineProperties, IMapSplineEvents, IMapSplineAdapters, MapSpline } from \"./.internal/charts/map/MapSpline\";\nexport { IMapArcProperties, IMapArcEvents, IMapArcAdapters, MapArc } from \"./.internal/charts/map/MapArc\";\nexport { MapPolygonSeriesDataItem, IMapPolygonSeriesDataFields, IMapPolygonSeriesProperties, IMapPolygonSeriesEvents, IMapPolygonSeriesAdapters, MapPolygonSeries } from \"./.internal/charts/map/MapPolygonSeries\";\nexport { MapLineSeriesDataItem, IMapLineSeriesDataFields, IMapLineSeriesProperties, IMapLineSeriesEvents, IMapLineSeriesAdapters, MapLineSeries } from \"./.internal/charts/map/MapLineSeries\";\nexport { MapSplineSeriesDataItem, IMapSplineSeriesDataFields, IMapSplineSeriesProperties, IMapSplineSeriesEvents, IMapSplineSeriesAdapters, MapSplineSeries } from \"./.internal/charts/map/MapSplineSeries\";\nexport { MapImageSeriesDataItem, IMapImageSeriesDataFields, IMapImageSeriesProperties, IMapImageSeriesEvents, IMapImageSeriesAdapters, MapImageSeries } from \"./.internal/charts/map/MapImageSeries\";\nexport { MapArcSeriesDataItem, IMapArcSeriesDataFields, IMapArcSeriesProperties, IMapArcSeriesEvents, IMapArcSeriesAdapters, MapArcSeries } from \"./.internal/charts/map/MapArcSeries\";\nexport { multiPolygonToGeo, multiLineToGeo, multiPointToGeo, pointToGeo } from \"./.internal/charts/map/MapUtils\";\nexport { IZoomControlProperties, IZoomControlEvents, IZoomControlAdapters, ZoomControl } from \"./.internal/charts/map/ZoomControl\";\nexport { ISmallMapProperties, ISmallMapEvents, ISmallMapAdapters, SmallMap } from \"./.internal/charts/map/SmallMap\";\n\n/**\n * Elements: projections\n */\nexport { Projection } from \"./.internal/charts/map/projections/Projection\";\nimport * as projections from \"./.internal/charts/map/projections\";\nexport { projections };\nimport * as geo from \"./.internal/charts/map/Geo\";\nexport { geo };\n\n\n\n// WEBPACK FOOTER //\n// ../../src/maps.ts","/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic _component!: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: number[][][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: number[][][][];\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n *\r\n * @type {string}\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tlineString?: number[][];\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLineString?: number[][][];\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLineString?: IGeoPoint[];\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLineString?: IGeoPoint[][];\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: number[];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: number[][];\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: IGeoPoint[];\r\n\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n *\r\n * @type {IMapPolygonDataObject | IMapLineDataObject}\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map\r\n\t * @type {Projection}\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * [deltaLatitude description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tdeltaLatitude?: number;\r\n\r\n\t/**\r\n\t * [deltaLongitude description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapChartProperties}\r\n\t */\r\n\tpublic _properties!: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapChartEvents;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t * @type {number}\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t *\r\n\t * @type {ZoomControl}\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t *\r\n\t * @type {SmallMap}\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @defautl 1\r\n\t * @type {number}\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t * @type {number}\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * List of series of map objects. (lines, areas, etc.)\r\n\t *\r\n\t * @type {ListTemplate<MapSeries>}\r\n\t */\r\n\tpublic series: ListTemplate<MapSeries>;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t *\r\n\t * @type {Animation}\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\t//\t\tthis.deltaLatitude = 0;\r\n\t\tthis.deltaLongitude = 0;\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.draggable = true;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"datavalidated\", this.updateExtremes, this);\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.events.on(\"maxsizechanged\", this.udpateScaleRatio, this);\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\r\n\t\tchartContainer.events.on(\"wheel\", this.handleWheel, this);\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this);\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused && (!this._zoomControl || !this._zoomControl.thumb.isFocused)) {\r\n\t\t\t\tswitch (keyboard.getEventKey(ev.event)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]}  event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Eckert6\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * Orthographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Projection}  projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tthis.setPropertyValue(\"projection\", projection, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Projection} Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif ((this.west > series.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = series.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < series.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = series.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < series.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = series.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > series.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = series.south;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// must reset\r\n\t\tthis.projection.centerPoint = { x: 0, y: 0 };\r\n\t\tthis.projection.scale = 1;\r\n\r\n\t\t// temporary setting deltaLongitude to 0 in order to measure w/h correctly\r\n\t\tlet deltaLongitude = this.projection.deltaLongitude;\r\n\t\tthis.projection.deltaLongitude = 0;\r\n\t\tlet westPoint: IPoint = this.projection.convert({ longitude: this.west, latitude: (this.south - this.north) / 2 });\r\n\t\tlet eastPoint: IPoint = this.projection.convert({ longitude: this.east, latitude: (this.south - this.north) / 2 });\r\n\r\n\t\tlet northPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\tlet southPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.south });\r\n\t\tthis.projection.deltaLongitude = deltaLongitude;\r\n\r\n\t\tthis.projection.centerPoint = { x: westPoint.x + (eastPoint.x - westPoint.x) / 2, y: northPoint.y + (southPoint.y - northPoint.y) / 2 };\r\n\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet seriesWidth = eastPoint.x - westPoint.x;\r\n\t\tlet seriesHeight = southPoint.y - northPoint.y;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tthis.projection.scale = scaleRatio;\r\n\t\tthis.seriesWidth = seriesWidth * scaleRatio;\r\n\t\tthis.seriesHeight = seriesHeight * scaleRatio;\r\n\r\n\t\tthis.udpateScaleRatio();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected udpateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / this.seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / this.seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = this.scaleRatio;\r\n\t\t\t});\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. centers the map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tlet seriesContainer: Container = this.seriesContainer;\r\n\t\tlet chartContainer: Container = this.chartContainer;\r\n\r\n\t\tseriesContainer.x = chartContainer.pixelWidth / 2;\r\n\t\tseriesContainer.y = chartContainer.pixelHeight / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param {Object} geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Object} GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param  {IGeoPoint}  point      Center coordinate\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number): Animation {\r\n\t\tif (!point) {\r\n\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t}\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\r\n\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\t\tif (center) {\r\n\t\t\tsvgPoint = {\r\n\t\t\t\tx: this.pixelWidth / 2,\r\n\t\t\t\ty: this.pixelHeight / 2\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.zoomDuration;\r\n\t\t}\r\n\r\n\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t[{\r\n\t\t\t\tproperty: \"scale\",\r\n\t\t\t\tto: zoomLevel\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"x\",\r\n\t\t\t\tto: svgPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio - this.pixelPaddingLeft\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"y\",\r\n\t\t\t\tto: svgPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio - this.pixelPaddingTop\r\n\t\t\t}], duration, this.zoomEasing);\r\n\t\treturn this._mapAnimation;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param  {MapObject}  mapObject  Target map object\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\treturn this.zoomToRectangle(dataItem.north, dataItem.east, dataItem.south, dataItem.west, zoomLevel, center, duration);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param  {number}     north     Latitude of the North-most boundary\r\n\t * @param  {number}     east      Longitude of the East-most boundary\r\n\t * @param  {number}     south     Latitude of the South-most boundary\r\n\t * @param  {number}     west      Longitude of the West-most boundary\r\n\t * @param  {number}     level     Adjust zoom level\r\n\t * @param  {boolean}    center    Center on the given coordinate?\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: west + (east - west) / 2 }, zoomLevel, center, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param {IPoint}  shift     Vertical and horizontal shift\r\n\t * @param {number}  duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return {IGeoPoint} Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\treturn this.svgPointToGeo({\r\n\t\t\tx: this.pixelWidth / 2,\r\n\t\t\ty: this.pixelHeight / 2\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {SmallMap}  smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {SmallMap} Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {ZoomControl}  zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ZoomControl} Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return {MapSeries} Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * [deltaLatitude description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\r\n\t/*public set deltaLatitude(value: number) {\r\n\t\tthis.setPropertyValue(\"deltaLatitude\", $geo.wrapAngleTo180(value));\r\n\t\tthis.invalidateProjection();\r\n\t}\r\n*/\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\t/*\r\n public get deltaLatitude(): number {\r\n\t return this.getPropertyValue(\"deltaLatitude\");\r\n }*/\r\n\r\n\t/**\r\n\t * [deltaLongitude description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tthis.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value));\r\n\t\tthis.invalidateProjection();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t */\r\n\tprotected invalidateProjection() {\r\n\t\t//\t\tthis.projection.deltaLatitude = this.deltaLatitude;\r\n\t\tthis.projection.deltaLongitude = this.deltaLongitude;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param {DataSource} value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return {DataSource} Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n * This function is used to sort element's JSON config properties, so that\r\n * some properties that absolutely need to be processed last, can be put at\r\n * the end.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  a  Element 1\r\n * @param  {string}  b  Element 2\r\n * @return {number}     Sorting number\r\n */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || super.asIs(field);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/MapChart.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [number description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * [boolean description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineObjectEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * [mapLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @todo Review if necessary (same as parent)\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\t\tif (this.mapLine) {\r\n\t\t\tlet point: IOrientationPoint = this.mapLine.positionToPoint(this.position);\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * [position description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * [adjustRotation description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {boolean} value [description]\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} [description]\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineObject.ts","/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @type {MapPolygon}\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _polygon: number[][][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {number[][][][]}\r\n\t */\r\n\tprotected _multiPolygon: number[][][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _geoPolygon: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][][]}\r\n\t */\r\n\tprotected _multiGeoPolygon: IGeoPoint[][][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapPolygon} Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tthis._mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis.addSprite(this._mapPolygon);\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: number[][][]) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo([polygon]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get polygon(): number[][][] {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: number[][][][]) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo(multiPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): number[][][][] {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param {IGeoPoint[][]}  geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: IGeoPoint[][]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): IGeoPoint[][] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.updateAreaExtremes(multiGeoPolygon);\r\n\t\tthis.mapPolygon.multiGeoPolygon = this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateAreaExtremes(multiGeoPolygon: IGeoPoint[][][]): void {\r\n\t\tfor (let i = 0; i < multiGeoPolygon.length; i++) {\r\n\t\t\tlet geoPolygon: IGeoPoint[][] = multiGeoPolygon[i];\r\n\t\t\tlet surface: IGeoPoint[] = geoPolygon[0];\r\n\t\t\tthis.updateExtremes(surface);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.parsingStepDuration = 5000; // to avoid some extra redrawing\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapPolygonSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic clearPolygons() {\r\n\t\t$iter.each(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tmapPolygon.polygon.dispose();\r\n\t\t\tmapPolygon.dispose();\r\n\t\t})\r\n\t\tthis.mapPolygons.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc(){\r\n\t\tthis.clearPolygons();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.clearPolygons();\r\n\t\t}\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// if data is parsed in chunks, polygon list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapPolygons.moveValue(dataItem.mapPolygon);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\t//console.log(this.uid, this.mapPolygons.length);\r\n\t\t$iter.each(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tmapPolygon.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapPolygon>} Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param {string} polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygonSeries.ts","/**\r\n * Map spline series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapSpline } from \"./MapSpline\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSplineSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t *\r\n\t * @type {MapSpline}\r\n\t */\r\n\tprotected _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t *\r\n\t * @return {MapSpline} Element\r\n\t */\r\n\tpublic get mapLine(): MapSpline {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tthis._mapLine = this.component.mapLines.create(MapSpline);\r\n\t\t\tthis.addSprite(this._mapLine);\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSplineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineSeriesAdapters extends IMapLineSeriesAdapters, IMapSplineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map spline elements.\r\n *\r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSplineSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSplineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapSplineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSpline}\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSplineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSplineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapSpline} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapSpline();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\r\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSplineSeries.ts","/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @type {MapImage}\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number[]}\r\n\t */\r\n\tprotected _point: number[];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t *\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return {MapImage} Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tthis._mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(this._mapImage);\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number[]} point [description]\r\n\t */\r\n\tpublic set point(point: number[]) {\r\n\t\tthis._point = point;\r\n\t\tthis.geoPoint = $mapUtils.pointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} [description]\r\n\t */\r\n\tpublic get point(): number[] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param {IGeoPoint} geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.updateExtremes([this._geoPoint]);\r\n\t\tthis.mapImage.latitude = this._geoPoint.latitude;\r\n\t\tthis.mapImage.longitude = this._geoPoint.longitude;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapImageSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiPoint\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapImages.moveValue(dataItem.mapImage);\r\n\t\t});\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapImage>} Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImageSeries.ts","/**\r\n * Map arc series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapArc } from \"./MapArc\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapArcSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t *\r\n\t * @type {MapArc}\r\n\t */\r\n\tprotected _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t *\r\n\t * @return {MapArc} Element\r\n\t */\r\n\tpublic get mapLine(): MapArc {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tthis._mapLine = this.component.mapLines.create(MapArc);\r\n\t\t\tthis.addSprite(this._mapLine);\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArcSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcSeriesAdapters extends IMapLineSeriesAdapters, IMapArcSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of arc elements. (curved lines)\r\n *\r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapArcSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapArcSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapArcSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapArcSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapArcSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapArc}\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapArcSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapArcSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapArc} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapArc();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\r\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArcSeries.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Mercator projection.\r\n */\r\nexport class Mercator extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude in radians\r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn {\r\n\t\t\tlongitude: x,\r\n\t\t\tlatitude: 2 * Math.atan(Math.exp(y)) - Math.PI / 2\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn {\r\n\t\t\tx: lambda,\r\n\t\t\ty: Math.log(Math.tan((Math.PI / 2 + phi) / 2))\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Mercator\"] = Mercator;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Mercator.ts","/**\n * Functionality for Miller projection\n *\n * The function(s) below are from D3.js library (https://d3js.org/)\n * \n * ```\n * Copyright 2017 Mike Bostock\n * \n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, \n *    this list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice, \n *    this list of conditions and the following disclaimer in the documentation \n *    and/or other materials provided with the distribution.\n * \n * 3. Neither the name of the copyright holder nor the names of its \n *    contributors may be used to endorse or promote products derived from this \n *    software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n * POSSIBILITY OF SUCH DAMAGE.\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Projection } from \"./Projection\";\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\nimport { IPoint } from \"../../../core/defs/IPoint\";\nimport { registry } from \"../../../core/Registry\";\n\n/**\n * Miller projection.\n */\nexport class Miller extends Projection {\n\n\t/**\n\t * Converts screen coordinates to latitude/longitude.\n\t * \n\t * @param  {number}     x  X\n\t * @param  {number}     y  Y\n\t * @return {IGeoPoint}     Geographical coordinates in radians\n\t */\n\tpublic unproject(x: number, y: number): IGeoPoint {\n\t\treturn {\n\t\t\tlongitude: x,\n\t\t\tlatitude: 2.5 * Math.atan(Math.exp(0.8 * y)) - 0.625 * Math.PI\n\t\t};\n\t}\n\n\t/**\n\t * Converts geographical coordinates to screen coordinates.\n\t * \n\t * @param  {number}  lambda  Lambda parameter\n\t * @param  {number}  phi     Phi parameter\n\t * @return {IPoint}          Screen coordinates\n\t */\n\tpublic project(lambda: number, phi: number): IPoint {\n\t\treturn {\n\t\t\tx: lambda,\n\t\t\ty: 1.25 * Math.log(Math.tan(Math.PI / 4 + 0.4 * phi))\n\t\t};\n\t}\n\n}\n\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n * \n * @ignore\n */\nregistry.registeredClasses[\"Miller\"] = Miller;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Miller.ts","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Eckert6 projection.\r\n */\r\nexport class Eckert6 extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude.\r\n\t * \r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates in radians\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\tlet j = 1 + Math.PI / 2,\r\n\t\t\tk = Math.sqrt(j / 2);\r\n\t\treturn {\r\n\t\t\tlongitude: x * 2 * k / (1 + Math.cos(y *= k)),\r\n\t\t\tlatitude: Math.asin((y + Math.sin(y)) / j)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\tlet k = (1 + Math.PI / 2) * Math.sin(phi);\r\n\t\tfor (let i = 0, delta = Infinity; i < 10 && Math.abs(delta) > 0.00001; i++) {\r\n\t\t\tphi -= delta = (phi + Math.sin(phi) - k) / (1 + Math.cos(phi));\r\n\t\t}\r\n\t\tk = Math.sqrt(2 + Math.PI);\r\n\t\treturn {\r\n\t\t\tx: lambda * (1 + Math.cos(phi)) / k,\r\n\t\t\ty: 2 * phi / k\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Eckert6.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: Math.cos(phi) * Math.sin(lambda), y: Math.sin(phi) };\r\n\t}\r\n\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude - 180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: longitude - 180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\r\n\t\treturn [{ longitude: smallNum + longitude - 180 + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude + 90 }, { longitude: smallNum + longitude - 180 + delta, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180 + delta, east: longitude + delta };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect1)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect2)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i: number = 0; i < clippedArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = clippedArea[i][0];\r\n\t\t\t//let hole: IGeoPoint[] = clippedArea[i][1];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet prevPoint = surface[surface.length - 1];\r\n\r\n\t\t\t\tfor (let i = 0; i < surface.length; i++) {\r\n\t\t\t\t\tlet point = surface[i];\r\n\r\n\t\t\t\t\tif ($math.round(point.longitude, 4) == $math.round(prevPoint.longitude, 4)) {\r\n\t\t\t\t\t\tlet stepCount = Math.abs((prevPoint.latitude - point.latitude) * 2);\r\n\t\t\t\t\t\tlet extraPoints: IGeoPoint[] = [];\r\n\r\n\t\t\t\t\t\tif (stepCount > 1) {\r\n\t\t\t\t\t\t\tfor (let s = 1; s < stepCount; s++) {\r\n\t\t\t\t\t\t\t\textraPoints.push({ longitude: prevPoint.longitude, latitude: prevPoint.latitude + (point.latitude - prevPoint.latitude) / stepCount * s })\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsurface.splice(i, 0, ...extraPoints);\r\n\t\t\t\t\t\t\ti = i + extraPoints.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Orthographic.ts","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as $geo from \"../Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for a geographical projection.\r\n */\r\nexport class Projection {\r\n\r\n\tpublic deltaLongitude: number = 0;\r\n\r\n\tpublic deltaLatitude: number = 0;\r\n\r\n\tpublic deltaGama: number = 0;\r\n\r\n\tpublic centerPoint: IPoint = { x: 0, y: 0 };\r\n\r\n\tpublic scale: number = 1;\r\n\r\n\tpublic projectGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tlet clippedGeoArea: IGeoPoint[][][] = this.clipGeoArea(geoArea);\r\n\t\tlet convertedPoints: IPoint[][][] = this.convertGeoArea(clippedGeoArea);\r\n\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tpublic projectGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\treturn this.convertGeoLine(this.clipGeoLine(geoLine));\r\n\t}\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: -180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: -180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t//let latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude + smallNum, latitude: -90 }, { longitude: 180, latitude: -90 }, { longitude: 180, latitude: 90 }, { longitude: longitude + smallNum, latitude: 90 }];\r\n\t}\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude, east: (longitude + 180) };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoLine(geoLine: IGeoPoint[][]): IGeoPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedLine: IGeoPoint[][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tfor (let i: number = 0; i < geoLine.length; i++) {\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tif (segment) {\r\n\t\t\t\tlet clippedSegments: IGeoPoint[][] = this.clipLine(segment, clipRectangle1);\r\n\t\t\t\tclippedLine = clippedLine.concat(clippedSegments);\r\n\r\n\t\t\t\tif(this.deltaLongitude != 0){\r\n\t\t\t\t\tlet clippedSegments2: IGeoPoint[][] = this.clipLine(segment, clipRectangle2);\r\n\t\t\t\t\tclippedLine = clippedLine.concat(clippedSegments2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedLine;\r\n\t}\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\tprotected convertGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet convertedPoints: IPoint[][][] = [];\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet convertedAreaPoints: IPoint[][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\t\t\t\tlet convertedSurface: IPoint[] = [];\r\n\r\n\t\t\t\tfor (let s: number = 0; s < surface.length; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(surface[s]);\r\n\r\n\t\t\t\t\tconvertedSurface.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedSurface);\r\n\t\t\t}\r\n\r\n\t\t\tif (hole) {\r\n\t\t\t\tlet convertedHole: IPoint[] = [];\r\n\t\t\t\tfor (let s: number = 0; s < hole.length; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(hole[s]);\r\n\r\n\t\t\t\t\tconvertedHole.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedHole);\r\n\t\t\t}\r\n\t\t\tconvertedPoints.push(convertedAreaPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tprotected convertGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet convertedPoints: IPoint[][] = [];\r\n\r\n\t\tfor (let i: number = 0; i < geoLine.length; i++) {\r\n\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tlet convertedSegmentPoints: IPoint[] = [];\r\n\r\n\t\t\tfor (let s: number = 0; s < segment.length; s++) {\r\n\t\t\t\tlet geoPoint: IGeoPoint = segment[s];\r\n\r\n\t\t\t\tlet point: IPoint = this.convert(geoPoint);\r\n\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t}\r\n\r\n\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a geographical point (lat/long) to a screen point (x/y)\r\n\t * @param  {IGeoPoint} geoPoint Geo point (lat/long)\r\n\t * @return {IPoint}             Screen point (x/y)\r\n\t */\r\n\tpublic convert(geoPoint: IGeoPoint): IPoint {\r\n\t\tgeoPoint = $geo.normalizePoint(geoPoint);\r\n\t\tgeoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\tlet pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n\t\treturn {\r\n\t\t\tx: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 2) * this.scale,\r\n\t\t\ty: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 2) * this.scale\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen point (x/y) to a geographical point (lat/long)\r\n\t * @param  {IPoint}    point Screen point (x/y)\r\n\t * @return {IGeoPoint}       Geo point (lat/long)\r\n\t */\r\n\tpublic invert(point: IPoint): IGeoPoint {\r\n\t\tlet pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n\r\n\t\tlet geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n\r\n\t\tgeoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\r\n\t\treturn geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns X/Y coordinates.\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number} lambda [description]\r\n\t * @param  {number} phi    [description]\r\n\t * @return {IPoint}        X/Y coordinates\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: lambda, y: phi };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns geographical coordinates (lat/long).\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number}    x X coordinate\r\n\t * @param  {number}    y Y coordinate\r\n\t * @return {IGeoPoint}   Geographical point\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn { longitude: x, latitude: y };\r\n\t}\r\n\r\n\r\n\trotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) };\r\n\t}\r\n\r\n\tunrotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) };\r\n\t}\r\n\r\n\r\n\r\n\tclipLine(subjectPolyline: IGeoPoint[], clipPolygon: IGeoPoint[]): IGeoPoint[][] {\r\n\r\n\t\tif (!subjectPolyline || subjectPolyline.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar segment: IGeoPoint[] = subjectPolyline;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = segment;\r\n\t\t\tsegment = [];\r\n\t\t\ts = inputList[0];\r\n\t\t\tfor (let i = 0; i < inputList.length; i++) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsegment.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t}\r\n\r\n\t\t\t\ts = e;\r\n\t\t\t}\t\t\t\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\r\n\t\treturn [segment];\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//@todo add credits to roseta code\r\n\t//@todo: someday make it better\r\n\tclip(subjectPolygon: IGeoPoint[], clipPolygon: IGeoPoint[]) {\r\n\r\n\t\tif (!subjectPolygon || subjectPolygon.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar outputList = subjectPolygon;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = outputList;\r\n\t\t\toutputList = [];\r\n\t\t\ts = inputList[inputList.length - 1]; //last on the input list\r\n\t\t\tfor (let i in inputList) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutputList.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t}\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\t\treturn outputList;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic getExtremes(geoPoints: IGeoPoint[]): IGeoRectangle {\r\n\r\n\t\tlet west: number = geoPoints[0].longitude;\r\n\t\tlet east: number = geoPoints[0].longitude;\r\n\t\tlet north: number = geoPoints[0].latitude;\r\n\t\tlet south: number = geoPoints[0].latitude;\r\n\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((west > longitude)) {\r\n\t\t\t\twest = longitude;\r\n\t\t\t}\r\n\t\t\tif ((east < longitude)) {\r\n\t\t\t\teast = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((north < latitude)) {\r\n\t\t\t\tnorth = latitude;\r\n\t\t\t}\r\n\t\t\tif ((south > latitude)) {\r\n\t\t\t\tsouth = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { north: north, east: east, south: south, west: west };\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isInside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.north < r2.north && r1.south > r2.south && r1.west > r2.west && r1.east < r2.east) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isOutside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.south > r2.north || r1.north < r2.south || r1.west > r2.east || r1.east < r2.west) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t//@todo: move to some utils?\r\n\t//@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\r\n\tpublic intermediatePoint(pointA: IGeoPoint, pointB: IGeoPoint, position: number) {\r\n\t\tvar phi1 = pointA.latitude * $math.RADIANS;\r\n\t\tlet lambda1 = pointA.longitude * $math.RADIANS;\r\n\r\n\t\tlet phi2 = pointB.latitude * $math.RADIANS;\r\n\t\tlet lambda2 = pointB.longitude * $math.RADIANS;\r\n\r\n\t\tvar sinPhi1 = Math.sin(phi1);\r\n\t\tlet cosPhi1 = Math.cos(phi1);\r\n\t\tlet sinLambda1 = Math.sin(lambda1);\r\n\t\tlet cosLambda1 = Math.cos(lambda1);\r\n\t\tvar sinPhi2 = Math.sin(phi2);\r\n\t\tlet cosPhi2 = Math.cos(phi2);\r\n\t\tlet sinLambda2 = Math.sin(lambda2);\r\n\t\tlet cosLambda2 = Math.cos(lambda2);\r\n\r\n\t\t// distance between points\r\n\t\tvar deltaPhi = phi2 - phi1;\r\n\t\tvar deltaLambda = lambda2 - lambda1;\r\n\t\tvar a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) + Math.cos(phi1) * Math.cos(phi2) * Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n\t\tvar delta = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n\t\tvar A = Math.sin((1 - position) * delta) / Math.sin(delta);\r\n\t\tvar B = Math.sin(position * delta) / Math.sin(delta);\r\n\r\n\t\tvar x = A * cosPhi1 * cosLambda1 + B * cosPhi2 * cosLambda2;\r\n\t\tvar y = A * cosPhi1 * sinLambda1 + B * cosPhi2 * sinLambda2;\r\n\t\tvar z = A * sinPhi1 + B * sinPhi2;\r\n\r\n\t\tvar phi3 = Math.atan2(z, Math.sqrt(x * x + y * y));\r\n\t\tvar lambda3 = Math.atan2(y, x);\r\n\r\n\t\treturn { latitude: phi3 * $math.DEGREES, longitude: lambda3 * $math.DEGREES };\r\n\t};\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Projection\"] = Projection;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Projection.ts"],"sourceRoot":""}